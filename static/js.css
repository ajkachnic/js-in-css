h1 {
 content: "this.innerText = 'JS-in-CSS'; console.log('hello from js in css')"
}

main > p:first-of-type {
  content: "this.innerHTML = 'React and other JavaScript frameworks have popularized the CSS in JS approach, but what if we did the reverse? Introducing: <em>JavaScript in CSS</em>'";
}

section:first-of-type > h2 {
  content: "this.innerText = 'Get Started'"
}
section:first-of-type > p:first-of-type {
  content: "this.innerText = 'To try JS-in-CSS, add this script tag to your markup'"
}
section:first-of-type > pre:first-of-type code {
  content: "this.innerHTML = '&lt;script src=\"https://js-in-css.vercel.app/script.js\" defer&gt;&lt;/script&gt;'"
}
section:first-of-type > p:nth-of-type(2) {
  content: "this.innerText = 'Then, in your CSS, you can write code like this:'"
}
section:first-of-type > p:nth-of-type(2) {
  content: "this.innerText = 'This code will be executed for any DOM element that the selector applies to. Therefore, it is a good idea to use IDs to avoid the same code executing multiple times.'"
}
section:first-of-type > p:nth-of-type(3) {
  content: "this.innerHTML = 'Note that since the <code>content</code> property is used to store your JavaScript, JS-in-CSS will not work with pseudo elements (but they&apos;re fake anyway)'";
}
section:nth-of-type(2) > h2 {
  content: "this.innerHTML = 'Advanced features'";
}
section:nth-of-type(2) > h3:first-of-type {
  content: "this.innerHTML = '<code>this</code> Access'";
}
section:nth-of-type(2) > p:first-of-type {
  content: "this.innerText = 'For every JavaScript element that is executed, <code>this</code> is bound to a reference to the DOM object. This means you can write CSS like this:'"
}
section:nth-of-type(2) > p:nth-of-type(2) {
  content: "this.innerHTML = 'Of course, you can change DOM content among other things. <em>JS-in-CSS isn&apos;t reactive just yet</em>, so you can&apos;t do things like hover events (we&apos;re working on it)'"
}
section:nth-of-type(2) > h3:nth-of-type(2) {
  content: "this.innerText = 'Setting variables'";
}
section:nth-of-type(2) > p:nth-of-type(3) {
  content: "this.innerHTML = 'Since each piece of code is executed in a separate function (and a separate scope), we need a way to assign global variables. Thankfully, we can use <code>window</code> to do this (<em>this is really cursed</em>)'"
}
section:nth-of-type(2) > h3:nth-of-type(3) {
  content: "this.innerText = 'Ordering code'";
}
section:nth-of-type(2) > p:nth-of-type(4) {
  content: "this.innerText = 'Since the executor recursively travels through the DOM, if you want to use variables in a later function, put the element that sets them earlier in the document'";
}

section:nth-of-type(3) > h2 {
  content: "this.innerHTML = 'Frequently Asked Questions'";
}
section:nth-of-type(3) > h3:first-of-type {
  content: "this.innerText = 'Does this really work?'";
}
section:nth-of-type(3) > p:first-of-type {
  content: "this.innerHTML = 'Yes it does! In fact, this entire site is rendered with it (minus the code blocks because they&apos;re annoying). Don&apos;t believe me? Check your console ;)'";
}
section:nth-of-type(3) > h3:nth-of-type(2) {
  content: "this.innerText = 'Why?'";
}
section:nth-of-type(3) > p:nth-of-type(2) {
  content: "this.innerText = 'Why not?'";
}
section:nth-of-type(3) > h3:nth-of-type(3) {
  content: "this.innerText = 'How can I contribute to this amazing tool?'";
}
section:nth-of-type(3) > p:nth-of-type(3) {
  content: "this.innerHTML = 'You can visit <a href=\"https://github.com/ajkachnic/js-in-css\">the GitHub repo</a>'";
}